#!/c/Users/sp4ce/AppData/Local/Programs/Python/Python38-32/python

import sys
import cv2
import numpy as np
import argparse
import myimutils as myim
import mycolortools
import random
from scipy import stats

ap = argparse.ArgumentParser()
ap.add_argument("infile",help="Name of the input animation",type=str)
ap.add_argument("-o","--outfile",required=False,help="Name of the output background file",default='test.png')
ap.add_argument("-g","--outgif",required=False,help="Name of the background-subtracted animation file",default='test.gif')
ap.add_argument("-d","--direction",required=False,help="Direction of scrolling (1=vertical, 2=horizontal)",type=int,default=1)
ap.add_argument("-n","--npos",required=False,help="Number of random positions to use in fit.",type=int,default=1000)
ap.add_argument("-r","--range",required=False,help="Range of offsets to test between frames",type=int,default=3)
args=vars(ap.parse_args())

imlist1,durations = myim.read_gif(args['infile'])
dimens=imlist1[0].shape
#positions=[(random.randrange(0,dimens[0]),random.randrange(0,dimens[1])) for i in range(args['npos'])]
box=myim.capture_box(imlist1[0])
randarr=np.random.randn(dimens[0],dimens[1])
indices=np.nonzero(randarr>-3)
box_indices=myim.indices_in_box(indices,box[0][0],box[1][0],box[0][1],box[1][1])
clipped_indices=myim.remove_near_boundary(imlist1[0],box_indices,args['range'])
print(clipped_indices[0].shape)

i=0
offsets=[0]
for im in imlist1:
    imlist1[i]=mycolortools.color_combine(im)
    if i>0:
        offset=myim.find_offset(imlist1[i],imlist1[i-1],clipped_indices,direction=args['direction'],offset_range=args['range'])
        offsets.append(offset)
    i+=1

total_offset=np.sum(offsets)
print(offsets)
if args['direction']==1:
    new_dimens=(len(imlist1),dimens[0]+abs(total_offset),dimens[1])
else:
    new_dimens=(len(imlist1),dimens[0],dimens[1]+abs(total_offset))

back_image=np.random.randint(0,100000,new_dimens,'int')
i=0
if total_offset>0:
    offset=0
else:
    offset=-total_offset
for im in imlist1:
    offset+=offsets[i]
    print(offset)
    if args['direction']==1:
        back_image[i,offset:offset+dimens[0],:]=imlist1[i]
    else:
        back_image[i,:,offset:offset+dimens[1]]=imlist1[i]
    i+=1
imagemode=stats.mode(back_image)
print(imagemode[0].shape)
image=np.squeeze(imagemode[0],axis=0)
image_mode=mycolortools.color_expand(image)
cv2.imwrite(args['outfile'],image_mode)
myim.imshow_loop(image_mode,'Background Image','x')
sys.exit()

i=0
for im in imlist1:
    indices=np.nonzero(im==image)
    im[indices]=0
    imlist1[i]=mycolortools.color_expand(im)
#    indices=mycolortools.select_color(imlist1[i],[0,0,0],args['fuzz'],invert=True)
#    mask=myim.make_mask(indices,imlist1[i].shape)
#    imlist1[i]=myim.maketransparent_withmask(imlist1[i],mask)
    i+=1
cv2.imwrite(args['outfile'],image)
imlist1=myim.convert_to_PIL(imlist1)
myim.write_animation(imlist1,durations,args['outgif'])
