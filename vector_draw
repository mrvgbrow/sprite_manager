#!/c/Users/sp4ce/AppData/Local/Programs/Python/Python38-32/python

import cv2
import os
import math
import myimutils as myim
import genutils as genu
import sys
import argparse
import numpy as np
import mycolortools as mycolor
import myspritetools as mysprite


ap = argparse.ArgumentParser()
ap.add_argument("infile",help="Name of the input image to draw from",type=str)
ap.add_argument("game",help="Name of the game the sprite is from",type=str)
ap.add_argument("object",help="Name of the object the sprite represents",type=str)
ap.add_argument("frame",help="The particular frame in the sprite sequence",type=str)
ap.add_argument("-o","--outfile",required=False,help="Name of the output animation file",default='test.gif')
ap.add_argument("-v","--voutfile",required=False,help="Name of the vector/point output file",default='default.vdat')
ap.add_argument("-c","--color",required=False,help="Line color.",type=str,default='white')
ap.add_argument("-f","--frames",required=False,help="Animation frames per line.",type=int,default=3)
ap.add_argument("-e","--expandfac",required=False,help="Factor by which the final animation is larger than the original sprite.",type=int,default=3)
ap.add_argument("-s","--scale",required=False,help="Factor by which to scale the final sprite.",type=float,default=1)
ap.add_argument("-r","--rotate",required=False,help="Angle by which to rotate the final sprite.",type=float,default=0)
ap.add_argument("-l","--linewidth",required=False,help="Width of draw line.",type=int,default=1)
args=vars(ap.parse_args())

angle=args['rotate']*math.pi/180
name,file_extension=os.path.splitext(args['infile'])
xlist=[]
ylist=[]
points=[]
if file_extension=='.png':
    imlist1,durations = myim.read_imdir(args['infile'])

    box=myim.capture_box(imlist1[0])
    first_step=1

    new_img=imlist1[0].copy()
    sub_img=new_img[box[0][1]:box[1][1],box[0][0]:box[1][0]]
    while True:
        if first_step==0:
            old_point=point
        point=myim.capture_point(sub_img,mode=1)
        if point == (0,0):
            break
        point_expand=(point[0]*args['expandfac'],point[1]*args['expandfac'])
        points.append(point_expand)
        xlist.append(point_expand[0])
        ylist.append(point_expand[1])
        if first_step==0:
            sub_img=cv2.line(sub_img,old_point,point,[0,255,0],1)
        else:
            first_step=0
    mysprite.add_sprite_vector([xlist,ylist],args['game'],args['object'],args['frame'])
#    f=open(args['voutfile'],"w")
#    for i in range(len(xlist)):
#        f.write(str(xlist[i])+","+str(ylist[i])+"\n")
#    f.close()
else:
    f=open(args['infile'],"r")
    fl=f.readlines()
    for line in fl:
        (x,y)=line.split(" ")
        xlist.append(int(x))
        ylist.append(int(y))
        points.append((int(x),int(y)))
    f.close()


for i in range(len(points)):
    points[i]=(int(points[i][0]*args['scale']),int(points[i][1]*args['scale']))
    ylist[i]=int(args['scale']*ylist[i])
    xlist[i]=int(args['scale']*xlist[i])

center=(int(np.mean(xlist)),int(np.mean(ylist)))

points=genu.rotate_points(center,points,angle)
xlist=[]
ylist=[]
for i in range(len(points)):
    xlist.append(points[i][0])
    ylist.append(points[i][1])
    print(points[i][0],points[i][1])

padfac=1.5
shape1=int((max(ylist)-min(ylist))*padfac)
shape2=int((max(xlist)-min(xlist))*padfac)
raypoint=(int(0.15*shape2),int(0.15*shape1))
imlist1=[]
durations=[]
x_norm=min(xlist)-int(0.5*shape2/padfac*(padfac-1))
y_norm=min(ylist)-int(0.5*shape1/padfac*(padfac-1))
im_ref=np.zeros((shape1,shape2,3),'uint8')
color=mycolor.color_to_BGR(args['color'])
bluecolor=mycolor.color_to_BGR('blue')
fpl=args['frames']
increment=1/fpl
pt0=(points[0][0]-x_norm,points[0][1]-y_norm)
xdiff=(points[1][0]-points[0][0])/fpl
ydiff=(points[1][1]-points[0][1])/fpl
index=0
for i in range(fpl*(len(points)-1)):
    step=(i+1)-index*fpl
    pt1=(int(pt0[0]+step*xdiff),int(pt0[1]+step*ydiff))
    imhere=np.copy(im_ref)
    cv2.line(imhere,pt0,pt1,color,args['linewidth'])
    im_ref=np.copy(imhere)
    cv2.line(imhere,raypoint,pt1,bluecolor)
    imlist1.append(imhere)
    durations.append(30)
    if step==fpl and index<len(points)-2:
        index+=1
        pt0=(points[index][0]-x_norm,points[index][1]-y_norm)
        xdiff=(points[index+1][0]-points[index][0])/fpl
        ydiff=(points[index+1][1]-points[index][1])/fpl

imlist1.append(im_ref)
durations.append(3000)
myim.gif_viewer(imlist1,durations,'Result')
imlist1=myim.convert_to_PIL(imlist1)
myim.write_animation(imlist1,durations,args['outfile'])
