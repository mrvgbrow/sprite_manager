#!/c/Users/sp4ce/AppData/Local/Programs/Python/Python38-32/python

import os
import sys
import cv2
import numpy as np
import argparse
import multiprocessing
import mycolortools as mycolor
import myimutils
import plotfunctions as pfunc
import myspritetools
import matplotlib.pyplot as plt
import matplotlib.animation as anim
import math


if __name__ == '__main__':
    multiprocessing.freeze_support()
    ap = argparse.ArgumentParser()
    ap.add_argument("infile",help="Name of the input background file",type=str)
    ap.add_argument("-o","--outfile",required=False,help="Name of the output file",default='default.gif')
    ap.add_argument("-i","--inpath",required=False,help="Name of the input path file",type=str,default='None')
    ap.add_argument("-p","--outpath",required=False,help="Name of the output path file",default='default.pdat')
    ap.add_argument("game",help="Name of the game the sprite is from",type=str)
    ap.add_argument("object",help="Name of the object the sprite represents",type=str)
    ap.add_argument("-f","--frame",required=False,help="The particular frame in the sprite sequence",type=str,default='all')
    ap.add_argument("-s","--size",required=False,help="The sprite size scale factor",type=float,default=1.0)
    ap.add_argument("-c","--colorscheme",required=False,help="The sprite color scheme to match to",type=str,default='None')
    ap.add_argument("-l","--color",required=False,help="The color of the path to draw",type=str,default='255 255 255')
    ap.add_argument("-r","--range",required=False,help="Range of position offsets to consider",type=int,default=15)
    ap.add_argument("-m","--smooth",required=False,help="Frames to smooth over in the speed plot.",type=int,default=5)
    ap.add_argument("-z","--rotations",required=False,help="Number of sprite rotation angles to test",type=int,default=1)
    ap.add_argument("-F","--flips",required=False,help="Check for sprite flips (0 = Vertical, 1 = Horiztonal, -1 = Horiztonal+Vertical, 2 = All, 99 = None)?",type=int,default=99)
    ap.add_argument("-t","--threshold",required=False,help="Chi value that will trigger a full image search",type=int,default=10)
    ap.add_argument("-w","--weight",required=False,help="Relative transparency of line",type=float,default=0.6)
    args=vars(ap.parse_args())

    game=args['game']
    object=args['object']
    (background,durations)=myimutils.read_imdir(args['infile'])
    frame=args['frame']
    outfile=args['outfile']
    size=args['size']

    mysprite=myspritetools.Sprite(game,object,frame,size=size)

    if args['rotations']>1:
        mysprite.save_rotations(int(360/args['rotations']))

    if args['flips']!=99:
        mysprite.save_flips(ftype=args['flips'])

    if args['colorscheme']!='None':
        mysprite.swap_colors(args['colorscheme'])

    path=[]
    background2=[]
    if args['inpath']=='None':
        init_pos=myimutils.capture_point(background[0])
        for i in range(len(background)):
            background2.append(background[i])
            if i<0:
                pos_guess=(init_pos[0]+path[i-1][0]-path[i-2][0],init_pos[1]+path[i-1][1]-path[i-2][1])
            else:
                pos_guess=init_pos
            chimin,dx,dy,imnum,indices=mysprite.fit(background[i],pos_guess,args['range'])
            if chimin>args['threshold']:
                print('Frame '+str(i))
                pos_guess=myimutils.capture_point(background[i])
                if (pos_guess == (0,0)):
                    break
                chimin,dx,dy,imnum,indices=mysprite.fit(background[i],pos_guess,args['range'])
           # chimin,dx,dy,imnum,indices=mysprite.fit(background[i],pos_guess,background[i].shape[0]*2)
            init_pos=(pos_guess[0]-dx,pos_guess[1]-dy)
            if chimin<args['threshold']:
                path.append(init_pos)        
            else:
                path.append(pos_guess)
    else:
        f=open(args['inpath'],'r')
        f1=f.readlines()
        i=0
        for line in f1:
            background2.append(background[i])
            (x,y)=line.split(',')
            i+=1
            path.append((int(x),int(y)))
        f.close()

    spath=myspritetools.sprite_path(path)
    spath.write_path(args['outpath'])
    speeds=spath.find_speeds()
    spath.smooth(args['smooth'])
    color=mycolor.parse_color(args['color'])
    background=spath.overlay(background2,blend=args['weight'],color=color)
    myimutils.gif_plot(spath.speed,background2,durations)
    background2=myimutils.convert_to_PIL(background2)
    myimutils.write_animation(background2,durations,args['outfile'],pil=0)

